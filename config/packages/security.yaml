security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory: { memory: null }
        in_database:
            entity:
                class: App\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: in_database
            form_login:
                login_path: security_login
                check_path: security_login
            logout:
                path: security_logout
                target: home

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    role_hierarchy:
        ROLE_STUDENT_MANAGER: ROLE_CONTRATS_MANAGER
        ROLE_NOTE_MANAGER : [ROLE_STUDENT_MANAGER, ROLE_SAISIE_NOTES, ROLE_REQUEST_MANAGER, ROLE_CLASSES_MANAGER, ROLE_EC_MANAGER, ROLE_PV_MANAGER]
        ROLE_SUPER_USER: [ROLE_CONFIG_MANAGER, ROLE_CREATION_MANAGER, ROLE_EMPLOYE_MANAGER, ROLE_USER_MANAGER, ROLE_PROGRAMACADEMIQUE_MANAGER, ROLE_NOTE_MANAGER, ROLE_PAIEMENT_MANAGER, ROLE_EXAMEN_MANAGER]

    access_control:
        - { path: ^/0a2e757f01680d2cd2abce171a663a72, roles: ROLE_CONFIG_MANAGER } # la configurationn
        - { path: ^/gestion-etudiants, roles: ROLE_STUDENT_MANAGER }
        - { path: ^/gestion-des-etudiants, roles: ROLE_STUDENT_MANAGER }
        - { path: ^/gestion-des-classes, roles: ROLE_CLASSES_MANAGER }
        - { path: ^/cbbeb11e87767ee5c468a789a46e67ab, roles: ROLE_CONTRATS_MANAGER }
        - { path: ^/creation, roles: ROLE_CREATION_MANAGER }
        - { path: ^/gestion-personnel, roles: ROLE_EMPLOYE_MANAGER }
        - { path: ^/gestion-examen, roles: ROLE_EXAMEN_MANAGER }
        - { path: ^/migrations, roles: ROLE_SUPER_USER }
        - { path: ^/gestion-utilisateurs, roles: ROLE_USER_MANAGER }
        - { path: ^/programmes-academiques, roles: ROLE_PROGRAMACADEMIQUE_MANAGER }
        - { path: ^/programmes-academiques, roles: ROLE_PROGRAMACADEMIQUE_MANAGER }
        - { path: ^/gestion-notes, roles: ROLE_NOTE_MANAGER }
        - { path: ^/gestions-notes, roles: ROLE_SAISIE_NOTES }
        - { path: ^/gestions-notes/saisie, roles: ROLE_SAISIE_NOTES }
        - { path: ^/gestions-notes/saisie-anonymate, roles: ROLE_SAISIE_NOTES }
        - { path: ^/gestion-paiements, roles: ROLE_PAIEMENT_MANAGER }
        - { path: ^/paiements, roles: ROLE_PAIEMENT_MANAGER }
        - { path: ^/programmes/academiques/liste/matieres, roles: [ROLE_PROGRAMACADEMIQUE_MANAGER, ROLE_EC_MANAGER] }
        - { path: ^/proces-verbaux, roles: ROLE_PV_MANAGER }
        - { path: ^/pv, roles: ROLE_PV_MANAGER }
        - { path: ^/gestion-requetes, roles: ROLE_REQUEST_MANAGER }
        - { path: ^/gestion-utilisateur, roles: ROLE_USER_MANAGER }
        - { path: ^/cloturer, roles: ROLE_SUPER_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
